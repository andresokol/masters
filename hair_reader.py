import math
import os
import random
import struct
import sys
import typing as tp

sys.path.append("/home/andresokol/code/masters/venv/lib/python3.8/site-packages")

import bpy  # noqa: E402
import bmesh
import tqdm  # noqa: E402

PointT = tp.Tuple[float, float, float]


class Vector:
    def __init__(self, x: float, y: float, z: float) -> None:
        self.x = x
        self.y = y
        self.z = z

    @classmethod
    def from_bytes(cls, file: tp.BinaryIO) -> "Vector":
        x, y, z = struct.unpack("<fff", file.read(12))
        return cls(x, -z, y)

    def length(self) -> float:
        return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z)

    def normalize(self) -> None:
        length = self.length()
        self.x /= length
        self.y /= length
        self.z /= length

    def __add__(self, other: "Vector") -> "Vector":
        assert isinstance(other, self.__class__)
        return self.__class__(
            self.x + other.x,
            self.y + other.y,
            self.z + other.z,
        )

    def __sub__(self, other: "Vector") -> "Vector":
        assert isinstance(other, self.__class__)
        return self.__class__(
            self.x - other.x,
            self.y - other.y,
            self.z - other.z,
        )

    def __rmul__(self, coeff: float) -> "Vector":
        return self.__class__(
            self.x * coeff,
            self.y * coeff,
            self.z * coeff,
        )

    def __mul__(self, other: float) -> "Vector":
        return self.__rmul__(other)

    def cross_product(self, other: "Vector") -> "Vector":
        assert isinstance(other, self.__class__)

        x = self.y * other.z - self.z * other.y
        y = self.z * other.x - self.x * other.z
        z = self.x * other.y - self.y * other.x

        return Vector(x, y, z)

    def dot_product(self, other: "Vector") -> float:
        return self.x * other.x + self.y * other.y + self.z * other.z

    def tuple(self) -> tp.Tuple[float, float, float]:
        return self.x, self.y, self.z

    def __repr__(self) -> str:
        return f"({self.x},{self.y},{self.z})"

    def get_any_normal(self) -> "Vector":
        SMALL = 1e-6
        if abs(self.x) < SMALL and abs(self.y) < SMALL:
            return self.__class__(0, -self.z, self.y)
        return self.__class__(-self.y, self.x, 0)


DEBUG_POINTS = [[0.029614094826407644, -3.4920622414283846, 6.065047152477099],
                [0.01921917051871569, -1.7786796912126106, 7.6815355243246515],
                [0.030565358307689028, -2.247698329261286, 6.096428689777703],
                [-0.5012860508357697, 0.47146526289548873, 6.6870709692899695],
                [0.012402156848860812, -1.13462249133909, 7.854369976125831],
                [0.0026810981288125646, -0.23112287491929973, 7.547269359089086],
                [-0.006776729597784303, 2.0776842070635837, 5.67533478191676],
                [-4.525454263536837, 2.4733305655768474, 3.1027135178114946],
                [-0.021772105696002964, 3.6981575185323816, 5.074871401278443],
                [-0.028405683045122476, 4.555636192757474, 5.1294833696896305],
                [-0.042490601502351844, 7.727147106027916, 4.2428967784021765],
                [0.027982478125750276, -3.7636321910162986, 5.986683828489298],
                [0.0278417397630375, -3.9163755706369514, 5.795886105379957],
                [0.029747197856779373, -3.9226927742050455, 5.525179568550435],
                [0.055434746971194215, -3.864017974967531, 5.619024401923653],
                [0.06131790481581856, -4.039196758576813, 5.754511623354389],
                [0.05566135091949764, -4.289400557569818, 5.958041470291612],
                [0.053032744453011205, -4.611597139137406, 5.992033722006731],
                [0.04221340890257075, -5.393679949498189, 5.579256427277507],
                [0.018343899249958273, -2.086843988780894, 7.370976345034471],
                [-0.5435664058521228, -1.9453714258752965, 6.488296329456844],
                [-7.187917181591679, 5.447055499145501, -0.10276248696112589],
                [-2.6615049812109826, 1.9105631614140997, 3.8068206390659043],
                [-3.2821524304712124, 1.8618639167769349, 3.752584578949353],
                [-3.8952386810237245, 1.9021993811726228, 3.5690271061913563],
                [-4.78548058749307, 2.2482321627994706, 3.0130356340872737],
                [-2.145893265595613, 2.084249181801228, 3.7121371702201102],
                [-3.4988492653531633, 3.300307037601616, 3.9363738954007133],
                [-2.874687767243876, 3.296032670299889, 3.9104788105287724],
                [-4.103926281190869, 3.225944686775188, 3.732807980977782],
                [-4.533347393814489, 3.051550151667306, 3.4759133792541803],
                [-5.319174570150897, 1.9103738282667289, 2.7091873917239653],
                [-2.335214102576223, -6.763312782613568, 4.785853221348013],
                [-4.776896010428313, 2.6152886937937154, 2.88513656132055],
                [-7.5519275721486245, 2.4930856474096643, -0.160463796502043],
                [-6.1016446579114145, 2.3863370307302443, 2.032211223258031],
                [-3.1901099268688826, -0.7554850377741289, 4.599491447165924],
                [-0.8067133031272089, -3.382102373539915, 5.990051472941381],
                [-0.7393270451260601, -3.8728107613568143, 5.689336517435947],
                [-1.6707545905171126, -3.4550256344657173, 5.5989161334263216],
                [-2.2678231205800894, -3.5498876540870254, 5.1078502872756175],
                [-1.3897024151750288, -3.828156638010891, 5.4109013849989225],
                [-1.913936701089263, -3.7919042487089185, 4.954537555300938],
                [-2.988028521400891, -4.324327603050343, 4.267359668032192],
                [-0.4858090016109369, -1.7577396486149932, 7.615188671480695],
                [-0.5542496810652935, -1.120630128441304, 7.77323134387413],
                [-5.570241514764065, 3.813216744852074, 3.218797661944741],
                [-1.8533989710850056, 0.7847590396987618, 4.574011613579316],
                [-1.919092497676114, -1.3281587603797531, 6.004172035361677],
                [-1.9570424668395596, -0.9476185168325544, 5.784589777800008],
                [-5.210767734596313, -0.5442481516768343, 3.729463766229813],
                [-0.5263762029006616, -0.27765136756999276, 7.35033597545511],
                [-4.009190869032183, 4.386899492611642, 4.261494496259893],
                [-4.90613996461995, 4.2047684059053445, 3.7757249409432276],
                [-6.402222747667485, 6.45976578104349, 1.0744135886340516],
                [-1.2967351047085742, 3.8752969908200576, 4.864390018529633],
                [-2.309662775854452, 3.169296073374138, 3.736167824411247],
                [-3.578459412721066, -3.7400060134745994, 4.041595874494625],
                [-7.171334964090177, -4.010654842885883, -1.3728426218065692],
                [-1.4899423791557864, -1.67878014705758, 5.793228147875745],
                [-0.9731199623345577, -1.8874614653905866, 5.863370432631065],
                [-2.9413841380907337, -3.6480017688036064, 4.05506865608578],
                [-2.663876278153842, -3.6442298841522605, 4.215571829472459],
                [-5.294832456341697, 4.6995048983762455, 3.4337645873091915],
                [-1.975260556719936, -1.5225585741720744, 5.661339870335439],
                [-2.8297612645480985, 4.339749434946617, 4.629092370951838],
                [-2.9500145329712044, 4.865262799027942, 4.721886413361723],
                [-3.649362305725548, 7.566457026492335, 3.441689960872452],
                [-5.820553743674083, 5.569451169778855, 2.4091321334145945],
                [-3.230879651831974, 6.253465081780268, 4.104528142283705],
                [-6.016005021060339, 4.204909924131707, 2.6519558727204924],
                [-6.588406015283055, 4.771544560297407, 1.3581782086149587],
                [-0.786865830578785, -3.6976288999003577, 5.910184600266568],
                [-1.504867795211652, -3.7007074870275005, 5.529440065993562],
                [-2.077185573311712, -3.6857409893484308, 5.083884425633855],
                [-1.3441337419841703, -1.763638007348923, 5.660983537151004],
                [-2.8017170110544662, -3.6373965258069063, 4.13070335166352],
                [-2.427554056599604, -3.7725861341074864, 4.586755613044218],
                [-2.593550481431377, -3.655770940321511, 4.2408972883334926],
                [-1.140045803097625, -1.6433342598318639, 6.683863383412934],
                [-1.8175769206131152, -3.7245591280871952, 4.849237900735524],
                [-1.2870186778569088, -3.8024410389508456, 5.167766291811432],
                [-0.6740469170554022, -3.8808328498152393, 5.427704469826082],
                [-0.7909568721132685, -5.386715209042091, 5.513522085521728],
                [-0.7115121179847024, -4.5789638955701495, 5.913177167153584],
                [-0.6879717268188519, -4.231686960169287, 5.8848593848242885],
                [-0.666154629336051, -3.998182441390884, 5.659429424801431],
                [-0.6366314608118684, -3.8427600957684125, 5.529073735947605],
                [-1.8265877977559364, -3.744652385712482, 4.919810355393537],
                [-1.896866538867747, -3.7902174918695106, 5.044046661078319],
                [-1.9872446092317593, -3.9238742839667555, 5.177645401386606],
                [-2.077602666196109, -4.133232978031083, 5.089275007906934],
                [-2.7969199584286426, -2.9355394604380005, 4.8837820824630995],
                [-7.9272887550470985, -0.4335307184705144, -2.5455660421626476],
                [0.03539572883895303, -2.14406313726786, 6.533438214152774],
                [-2.1879544945945577, -3.724171390791954, 4.525041515674019],
                [-2.2986735765040027, -3.711448248739854, 4.594062591794113],
                [-0.7585747950628605, -2.1760721187059473, 5.923713147281646],
                [-1.7901477248286701, -1.840907876201788, 5.222613102449216],
                [-0.8621317837461215, -2.040498845138912, 5.904917420899736],
                [-2.532431885835777, 0.4608848962075429, 4.373313813039921],
                [-3.6140290064928027, 0.10539564348001296, 4.203300052552073],
                [-2.08086159770296, -1.160451442481282, 5.434595783079281],
                [-5.271018062147293, 7.171897997206832, 2.3323671575712694],
                [-4.75325887145683, 6.089076597242334, 3.295970961653161],
                [-4.251467550252982, 4.942600374463854, 4.108849285550626],
                [-2.4004666508623345, -4.772252821408961, 4.726562990167338],
                [-1.4999416073946623, 4.709615162002995, 5.049965826525501],
                [-1.72024291739428, 6.2135478422162365, 4.574754943989866],
                [-1.9800256998866672, 7.705912271929238, 4.086763184163551],
                [-4.4518120329282755, 2.0243746834948153, 3.274540355351803],
                [-6.050339774596134, 1.510588245869359, 2.3768617113412205],
                [-1.8294648343124549, 2.2676365432412586, 3.613240484511749],
                [-5.30365381325587, 2.9904432305158304, 2.9304425939777303],
                [-1.4110096417619395, 1.166905411901027, 4.789496375825372],
                [-1.5222711588805313, -1.2202161364810413, 6.6369478907887824],
                [-6.8279226618306295, 1.1083361210881204, 1.7000261104105974],
                [-5.5538325032481755, 1.0443564499823346, 2.978103982220169],
                [-4.6885429834548695, 0.775238324242622, 3.5880502264580656],
                [-3.464549662461465, 0.8102496013481613, 3.8846435626747464],
                [-2.5526829717300523, 1.0269905133256145, 4.019899764363565],
                [-1.8896807328200314, 1.2991147094985802, 4.168660506691175],
                [-0.585750951274359, 1.9410211267246416, 5.4292595251994555],
                [-6.8012120589104486, -0.25744143446601786, 1.9509679379025187],
                [-5.8739687559070255, 3.162097495464687, 2.6092997515875993],
                [-0.28969514994364376, -2.0471077153231834, 7.3302501254554215],
                [-1.7923647042421476, 0.11455752025880983, 4.897833060257263],
                [-7.988803070323906, 2.7748611875644134, -2.2718138456527157],
                [-1.4049469031863686, 1.6378091388907183, 4.2452158954477355],
                [-2.168346420024274, -1.1265957552472674, 4.788462868173838],
                [-4.98184960078403, 2.581333778403203, 2.764823536609981],
                [-1.5453685735297467, -0.752857946484979, 6.364677323646099],
                [-7.690968394155729, -2.2129266141473516, -2.124584694145156],
                [-1.863580273811134, 2.5218033241228097, 3.445043855365448],
                [-1.0397225369445733, -0.4592754336996103, 6.9761235596917],
                [-5.425885174766449, -5.464698857050121, 2.1345788095830187],
                [-5.40798269355403, -6.361518755679931, 1.0779824233809023],
                [-7.6572217255771005, -0.4014613027604099, -0.30336800349184756],
                [-6.39064561756049, -4.614075792344153, 1.2532631324352295],
                [-7.097433595964579, 3.7825313958433746, 0.41141420003275186],
                [-2.462263025508728, -7.511464298942133, 4.4828907996872545],
                [-0.21116887041804855, -2.1101829685774525, 6.482076850042631],
                [-2.3823168049499523, -0.2966548666269899, 4.685649271892167],
                [-6.728394344228339, 2.331874984392086, 1.4020433755517487],
                [-3.8480737734909063, 2.2924768820290744, 3.4982582490955636],
                [-3.2895333373569544, 2.238703085898199, 3.660373067006219],
                [-2.5647561425842436, -3.8975273393352396, 4.4851556581471925],
                [-6.8047865403539545, -1.613031011166321, 1.8364981107916236],
                [-1.2599424827225785, -8.374568043177131, 4.435007150401383],
                [-3.270384554520191, -7.71343409502699, 2.989869683588715],
                [-4.232572891131858, -7.188001287133035, 2.146972307292124],
                [-0.03741510438896811, 6.135560446437813, 4.731454380204077],
                [0.03226737922775502, -8.43806495882636, 4.643358910363538],
                [-2.7732462394673445, 2.275958357908439, 3.6894761425010785],
                [-2.2946802869988274, 2.387433863017127, 3.594615830881388],
                [-2.002530614871072, 2.466416327726672, 3.455404623846519],
                [-6.415158093492217, 3.4008420697640176, 1.952748167882703],
                [-2.4072412409678883, 2.8402488031595414, 3.6583499946138858],
                [-2.9385547846436046, 2.9355709169899074, 3.7589121870750475],
                [-3.4544920264059003, 2.9537262831823003, 3.7313300047202773],
                [-3.9973378872207, 2.8729818619335115, 3.581098718098353],
                [-4.3634229647142, 2.743500350135524, 3.3846382353186257],
                [-7.708654856512916, 4.329872682359612, -1.3482513377943377],
                [-4.241409660409061, 2.382491965555583, 3.2858403629144206],
                [0.03513588129959189, -2.6314378441515474, 5.951384117892609],
                [-2.136335221686338, -2.668398340126755, 5.266877289562672],
                [-1.4931027233309453, -1.6320350279620994, 6.0258800574555735],
                [-0.8528133843918417, -2.6252159832689137, 5.897845810019689],
                [-0.015046743525438444, 2.932114047570467, 5.133118036114865],
                [-4.371663622568252, -6.305310082182382, 2.8662698310003734],
                [-3.440045690008999, -6.942174356052261, 3.6376125845862717],
                [-1.3051515204486086, -7.848861922931658, 5.193028524753615],
                [-6.360888758497234, -5.392465580713132, -0.2070769438980804],
                [-2.032180333360588, 2.660887067961971, 3.532302300063755],
                [-0.9761843119115494, 0.8750701516984485, 5.699169881225515],
                [0.02286181853499203, -7.89098999913736, 5.37398701871669],
                [-2.3143749019077298, -8.122561817094367, 3.8549484786367785],
                [-7.487876612461805, -1.9580210858132499, -0.09361614746528346],
                [-1.2761911715138408, -3.7864014856140793, 5.251756576362467],
                [-1.3447308982868005, -3.8963478842243138, 5.396811704884634],
                [-1.3906407975946657, -4.08922998845015, 5.564871534522631],
                [-1.4360840646056419, -4.4025135095991965, 5.5411436288367],
                [-1.669299410193702, -5.140718596382873, 5.189565565217897],
                [-2.389209458494229, -3.7179525990299567, 4.5460537842317805],
                [-2.556205533248519, -3.6756109378216855, 4.5504209224050385],
                [-2.734603942467269, -3.58885501084809, 4.551953657349152],
                [-3.3633378963456497, -3.2744566700991076, 4.440562895950812],
                [-5.888844641289244, -1.9534048255463863, 3.1494766222165467],
                [-0.9808263996768898, 1.5982354191244097, 5.0577803423147145],
                [-1.3403032818377172, 2.9370492833120627, 3.8449544875959774],
                [-1.746595476452989, 2.8217443150335937, 3.615210784987447],
                [-2.2629305273768234, -3.6536861835261663, 4.489289633051463],
                [-6.055196033308897, -3.557065941032956, 2.3445373012788693],
                [-0.7928649746792138, 2.881555802433642, 4.692494621240435],
                [-2.031205283320301, -5.963500833521217, 4.973826450446467],
                [-0.0009995274717873315, 0.5455510952216116, 6.900371295290782],
                [-0.553445421345202, 1.1572433573398424, 6.129525540895067],
                [-0.0033170574817575904, 1.280158643184862, 6.269612055085226],
                [-1.3864214578897263, -0.12925926807866972, 5.753338982416672],
                [0.01926775809824033, -7.152377043163959, 5.684502820229625],
                [0.028685016057683033, -6.230623381973792, 5.633666934066149],
                [-1.0066839857241399, -6.242352723144232, 5.477459379294217],
                [-3.5643345189013953, -4.761593532374616, 3.9822718138688202],
                [-2.7232626977106653, -1.5861934366697192, 4.657025124310756],
                [-2.8360615334111454, -5.473815004046012, 4.459926861133646],
                [-4.327755508230969, -1.4322955536454716, 4.385433147949215],
                [-3.417002509483844, -2.158509546459955, 4.547995379349999],
                [-4.979077073607968, -2.4142477756013125, 3.9256380098682158],
                [-1.2195918748337604, -7.134830930386602, 5.484542951587166],
                [-1.7693306409465555, -0.4210829135796734, 5.313247478964755],
                [-4.125283470402504, -5.4131679824134045, 3.4812957970455187],
                [-3.222733181136981, -6.153307170783958, 4.057422487004288],
                [-4.190433962433977, -3.957106655917838, 3.815401348589333],
                [-6.700097238237878, -2.7773126394568055, 1.7030360957492832],
                [-5.077127683323486, -4.187781496069106, 3.230720481552588],
                [-7.140217988922268, -3.375139218498748, 0.29510541436278714],
                [-4.039081114387818, -2.860022792390884, 4.271333153044949],
                [-1.3660290958961832, 0.5024362574194212, 5.26495185230057],
                [-1.3337286978833562, -1.5412144090491329, 6.799501047244981],
                [-1.7440684428206974, -1.565616850653448, 6.093666102533476],
                [-1.0615847193835655, -1.1618122932207706, 7.2279357317042],
                [-1.8423020392274134, 3.410054616255108, 3.9992163391305056],
                [-2.8315061037465354, 3.6726642771620366, 4.09370728404982],
                [-3.682830204351581, 3.705779684396429, 4.058704981364514],
                [-4.421725753238682, 3.6268513040228942, 3.80177504659337],
                [-4.973594909240898, 3.400373609927126, 3.4149491318938843],
                [-5.4595536643062115, 2.4794797315436696, 2.504063699149988],
                [-7.691958081590205, 1.0686865281683042, -0.2644982199816184],
                [-4.930685693840784, 1.619321799871, 3.05453886665169],
                [-4.238666434636826, 1.4180425611665362, 3.4514646345033455],
                [-3.3860654591317765, 1.388878473483552, 3.7189090012146693],
                [-2.5896517916191946, 1.5059790175841297, 3.848111412918662],
                [-1.9792780950240578, 1.7202062241171197, 3.838726523674211],
                [-1.565424536383091, 1.9327557326674363, 3.878064330005415],
                [-7.986134039197367, 1.2114215953234302, -2.626699877601915],
                [-1.7421206239429623, -1.6601367137298069, 5.782724213473287],
                [-0.9616698905019452, 0.22909290191153797, 6.2478107797045155],
                [-0.9053566052888993, -1.6390043354907982, 7.303574577902111],
                [-0.588039910694391, -1.9110577807933775, 7.057791333052755],
                [-0.9071393573582032, -1.7112865375467599, 6.998632949474128],
                [-1.5880098390026354, -1.8038705029466082, 5.579018913196279],
                [-0.47829164071280794, -1.9893454128062502, 7.232111321473994],
                [-0.4087920807228633, -2.051724432894225, 6.486929974635622],
                [-1.6263650669064877, 2.469818500281079, 3.5296612488472974],
                [-1.245562231474561, 2.2806517843472083, 3.9325284320583904],
                [-1.0421653186795097, 2.122395643540086, 4.3952488517633626],
                [-4.593615341392889, 2.6604141903155263, 3.167782596022427],
                [-4.903581200213219, 2.8723100092369274, 3.1188573753238273],
                [0.5048928689464032, 0.47526219284340865, 6.685212094656535],
                [4.53361731504478, 2.500720230469157, 3.1028463408149634],
                [0.6023749869247612, -1.9506970176688285, 6.498264955627256],
                [7.162907776633364, 5.411751213147822, -0.09415279201353854],
                [2.645545226072066, 1.9215005221382508, 3.7972887179620116],
                [3.2764211024958865, 1.8714104618401493, 3.746360845591745],
                [3.8983663798594774, 1.9149484035782134, 3.567488247497927],
                [4.785453905523102, 2.274578172267021, 3.0152587505895596],
                [2.134039827981125, 2.092649266787613, 3.7066614302876886],
                [3.4469939656923403, 3.326157643877723, 3.9315978663074063],
                [2.8132042976884364, 3.3118787769200004, 3.9201602148554713],
                [4.0739864173949645, 3.252632536079121, 3.7227728461222966],
                [4.51687635572327, 3.0772956994709704, 3.4792624708785453],
                [5.330163526962942, 1.9166732739401287, 2.7116324537800764],
                [2.33182679047036, -6.733467821027064, 4.7925981449436605],
                [4.7863103292907425, 2.651239667224477, 2.8844260439727165],
                [7.544477691020235, 2.4685342419112084, -0.1518410207932419],
                [6.10854445421813, 2.3920434221881015, 2.0433962804371575],
                [3.199415644394948, -0.7567109844773663, 4.622712400794562],
                [0.8479155634145941, -3.374413825102184, 5.997729264694939],
                [0.7806305184515461, -3.8694140456510633, 5.699528088885273],
                [1.6944807638970896, -3.4327477359896417, 5.6133182706262446],
                [2.276014065638689, -3.5285410876276617, 5.11836275153442],
                [1.4159601945846934, -3.8215393941266314, 5.419949672243135],
                [1.9329835613607962, -3.780620788815752, 4.966719031634355],
                [2.984527608234667, -4.298711449696999, 4.268297481002122],
                [0.5159103249476948, -1.7588050582124661, 7.623493477206061],
                [0.5653811647329272, -1.1209324223533033, 7.781503924029238],
                [5.554673287836404, 3.8466861410731177, 3.2245583479532485],
                [1.8547277845176144, 0.7885129655043039, 4.580487770034786],
                [1.9424700449977772, -1.3181262752506, 6.020845715263363],
                [1.9679076851355797, -0.9361018159749852, 5.805475470501989],
                [5.2134091195647025, -0.5530149528073993, 3.741419841959228],
                [0.5342232857020743, -0.27493363614946453, 7.349216452690179],
                [3.9636480378367676, 4.416803474004158, 4.27418666635829],
                [4.87854918350302, 4.242277114928694, 3.7835706012824133],
                [6.376833245065512, 6.437826123649817, 1.0830276861600794],
                [1.24930568075909, 3.8877943381419353, 4.858729695405778],
                [2.2647016343694055, 3.1743712124344086, 3.7421855788522436],
                [3.570166291222085, -3.724998364246889, 4.04562158247883],
                [7.104474581832429, -4.027489242232391, -1.3526429261082171],
                [1.5386589050655388, -1.6735799940498413, 5.81861104331751],
                [1.0365850292071381, -1.8886570377038274, 5.8862324764238],
                [2.953206255309084, -3.6234682413036747, 4.046029578756475],
                [2.6753471548003205, -3.624005868716964, 4.217949643733881],
                [5.272146833303168, 4.733429463678636, 3.441771632662004],
                [2.0025011087481888, -1.515333528140164, 5.687039704909473],
                [2.771262053578778, 4.359727225870113, 4.640120493027688],
                [2.887754571354468, 4.884940551368006, 4.738315329398745],
                [3.571439720762652, 7.562784378035039, 3.444120054709657],
                [5.789170135985784, 5.575012417698584, 2.4270883276291215],
                [3.1705524738951807, 6.258377574580708, 4.113290257113611],
                [6.0011396348947805, 4.228506723411744, 2.664703867394188],
                [6.571061592087624, 4.764390518163573, 1.3710207861600878],
                [0.8243873137150342, -3.693981590408825, 5.917606521550681],
                [1.531525107883434, -3.685593952413217, 5.543951068964013],
                [2.0973576217377623, -3.6661871854037575, 5.091350989509756],
                [1.4010360858244812, -1.7602115695016125, 5.686732108434242],
                [2.807847637957039, -3.6149760667969173, 4.134567820811341],
                [2.4456603633040395, -3.747814781431154, 4.590032882812984],
                [2.602291472003465, -3.635283195586553, 4.236530437126099],
                [1.171206125506579, -1.639188675349252, 6.689024443882801],
                [1.8342901629398911, -3.715596104369001, 4.861122007205736],
                [1.3176475389600815, -3.8009974426231077, 5.172725260075076],
                [0.7210031242550348, -3.8806740076017427, 5.433537792874105],
                [0.8584445708620825, -5.37652748619786, 5.514186354746691],
                [0.791617078637358, -4.566039438478073, 5.90917388517191],
                [0.7757969576741885, -4.220621956055901, 5.877044434383983],
                [0.7627856603852305, -3.990748150496909, 5.6560829182930945],
                [0.7268383539924996, -3.839312947595024, 5.520141095617326],
                [1.8682957175997337, -3.7321266657945706, 4.918684813184221],
                [1.9307564508767188, -3.7733574417275806, 5.051068618374643],
                [2.011721804245389, -3.901086694198419, 5.17743242984497],
                [2.1036525587257655, -4.106394163296892, 5.084127273335291],
                [2.815032524830782, -2.928131208817371, 4.907464328556685],
                [7.892543080268744, -0.476979878205225, -2.5382966810360514],
                [2.2138688577810735, -3.707171850936483, 4.5213665782625085],
                [2.32428303025005, -3.69036159550277, 4.5938837117684415],
                [0.8256825745489489, -2.1752260578881146, 5.936424007715026],
                [1.8412488728610277, -1.8333355229415345, 5.252972824901789],
                [0.9235935233305388, -2.04382852251014, 5.9267389888272035],
                [2.5354941408784217, 0.46397853165085845, 4.3795780952030725],
                [3.621589012930369, 0.10303562625628349, 4.210933651579538],
                [2.1055543924755558, -1.1534321608304219, 5.456039750409474],
                [5.21524305711798, 7.158050700088943, 2.3416528078859855],
                [4.712894341370831, 6.096342437002855, 3.320682067084128],
                [4.208263719476099, 4.975049491137632, 4.124992030598911],
                [2.4094490517456224, -4.747642065717418, 4.724175693540978],
                [1.4367768936437608, 4.717274054614814, 5.055247721146323],
                [1.6469214764102849, 6.21060125917224, 4.580547034967196],
                [1.884394010103132, 7.7033153163244545, 4.09373157713425],
                [4.453857903228175, 2.0422796210457843, 3.281443341284529],
                [6.065296503088215, 1.502066225294989, 2.3836504161709584],
                [1.824364879943162, 2.2714839270838656, 3.6035077764145598],
                [5.298224018195643, 3.0127620447024688, 2.9264052829113893],
                [1.4068628570263786, 1.171408216154223, 4.79048998938687],
                [1.5319674484013959, -1.2138093887963004, 6.650190281561088],
                [6.836469185827362, 1.0947132814243643, 1.700484363058436],
                [5.568584827245796, 1.0415816355590088, 2.9843422080350166],
                [4.697192879644628, 0.773485596030306, 3.5956138375232527],
                [3.4678008534488445, 0.8125128650650204, 3.8853680488158204],
                [2.5531583414962515, 1.0315099432385413, 4.02131065642822],
                [1.8842435259772015, 1.303162105328978, 4.179072664591018],
                [0.5775610958732416, 1.9432805251940524, 5.427139825311087],
                [6.814038563048285, -0.2695996407932686, 1.9605887215318702],
                [5.863990289456907, 3.1802040266225617, 2.6195817465695796],
                [0.32311399849113176, -2.0498498939712686, 7.33219244834779],
                [1.8056734321945318, 0.11666849276635549, 4.907771784639721],
                [7.96722306169057, 2.731867373185297, -2.2694031075203753],
                [1.4061445297735529, 1.6418195254380317, 4.244860839054603],
                [2.2060729465192486, -1.1176272645178078, 4.814298889754362],
                [4.988443624113852, 2.613201279133814, 2.7596896402950932],
                [1.5448981675998952, -0.7469776178934229, 6.3766778697002025],
                [7.638845212827972, -2.24793799693157, -2.1125045201039114],
                [1.8568306056474952, 2.5273879544719824, 3.4281406837351085],
                [1.0377108906485963, -0.4553156767738846, 6.981474901950897],
                [5.3800004408327124, -5.446317085514783, 2.161879212523459],
                [5.349618415168716, -6.329753513703682, 1.0995568360755783],
                [7.656313998529706, -0.4247505078927247, -0.290081799745991],
                [6.346605031334441, -4.6104616235768665, 1.2846901574129461],
                [7.0937868605957775, 3.761531894350961, 0.42218320827045375],
                [2.462717199054782, -7.473613654989283, 4.487686508686714],
                [0.2824370330850581, -2.1112984205688234, 6.490415327801074],
                [2.393282866422984, -0.2940545323578885, 4.705359998613517],
                [6.731273293499033, 2.322531564045943, 1.4114777090460393],
                [3.856423608519793, 2.308680621792668, 3.492376675878404],
                [3.289971403169573, 2.2510579920185405, 3.6534082704352784],
                [2.5792544863316875, -3.8692811156617504, 4.4865018087963975],
                [6.803340414611322, -1.6280906466596652, 1.854977081511862],
                [1.3080488319871808, -8.354932445112492, 4.435829547372599],
                [3.2672690295002846, -7.662436973756842, 2.995324836181851],
                [4.203005224638536, -7.139123260443302, 2.1505901647718844],
                [2.7630795153534695, 2.289455994700666, 3.6723935062658484],
                [2.2841988792393133, 2.401703026978285, 3.573588254540965],
                [1.9974292546682122, 2.4754248370658996, 3.439680766929918],
                [6.403590983304708, 3.4061790205841795, 1.9674453588788339],
                [2.370549142428631, 2.849949496684145, 3.6512386393257117],
                [2.8914761342113335, 2.9536178927067747, 3.762460410649112],
                [3.4149463319057425, 2.982179414885085, 3.7259464206421953],
                [3.973257223839245, 2.907037242882253, 3.5781271675069135],
                [4.347963228729421, 2.781409421983099, 3.3831737322369477],
                [7.692804596584715, 4.284821407024159, -1.3433956905842805],
                [4.253690395771607, 2.4042086098655986, 3.2855338616051455],
                [2.170416724088736, -2.6573460847971035, 5.285352926128233],
                [1.538117881497942, -1.6259103205981962, 6.049315024657801],
                [0.9026894406422135, -2.618581124896492, 5.905920490568477],
                [4.3408434051586875, -6.270983014724308, 2.88908048409683],
                [3.4046552445441103, -6.8991034694244835, 3.653903602325954],
                [1.3276385244407263, -7.833414466025218, 5.1990632622044615],
                [6.294659565104306, -5.382768413378778, -0.18757510284272172],
                [2.0138671097946697, 2.668829981321041, 3.51732489815312],
                [0.979302323732139, 0.8762872329022615, 5.703310333944202],
                [2.337466801843786, -8.081053853178638, 3.86060120520024],
                [7.468933507127128, -1.9785472618664883, -0.0671968730900403],
                [1.3462013416413696, -3.779368974708377, 5.254191168955842],
                [1.4083678666952393, -3.885223250154483, 5.39441625194852],
                [1.4471787540891707, -4.07048831004229, 5.558950633176934],
                [1.4925038459218078, -4.380164117363528, 5.528787157465736],
                [1.7028378301391704, -5.120764732544233, 5.182740556286802],
                [2.399202121973821, -3.703495162516611, 4.556579808138629],
                [2.5650125554287992, -3.6515043184187816, 4.550270780541155],
                [2.735927180490531, -3.5707898570107677, 4.558008603563799],
                [3.3657230285290476, -3.267869800386623, 4.4559077994016505],
                [5.87806333867865, -1.9689098172259771, 3.174263012788579],
                [0.9788749588267591, 1.6004386774164443, 5.0572361720383725],
                [1.328134453168257, 2.941632296189508, 3.85706627052015],
                [1.7266976420410476, 2.828297214957092, 3.611633187847765],
                [2.2746356167897286, -3.6395592709387565, 4.495733705324177],
                [6.0371591432398795, -3.562130921482699, 2.3709881228653344],
                [0.7718002514781679, 2.8827232715611055, 4.696124156913143],
                [2.0248506051758897, -5.935744428485574, 4.977848413121592],
                [0.5465022073565748, 1.1585696213191685, 6.127569677156977],
                [1.3949780308057829, -0.12567939372833603, 5.769059065437361],
                [1.0388708441437178, -6.226810515398601, 5.481803484232444],
                [3.5507006383630486, -4.743448275580524, 3.98944869664993],
                [2.7561573000985238, -1.5795372031116486, 4.684749982874209],
                [2.814458120318835, -5.445655649499997, 4.463691920114272],
                [4.324167553242359, -1.4435796863371606, 4.420417254076817],
                [3.436955287733518, -2.1596684969396014, 4.575172951485655],
                [4.968143788279565, -2.427289940945122, 3.9612738370568437],
                [1.2413802114076784, -7.1232189046989856, 5.4857844919372525],
                [1.7782427831632401, -0.4171938527206347, 5.3270920752463695],
                [4.107841974487209, -5.38848899143388, 3.4979210853808027],
                [3.199065714901211, -6.120160148797048, 4.07353967696212],
                [4.1758413634634675, -3.947632580106715, 3.8287266338281327],
                [6.68330760106682, -2.7906817214856754, 1.740159136574718],
                [5.0479002967275, -4.181860161272859, 3.252717230899883],
                [7.103932744431116, -3.390928264462966, 0.3253333473990665],
                [4.033176862994478, -2.8659088543951245, 4.298640833890026],
                [1.3752755443953766, 0.5041063459566066, 5.270159393472248],
                [1.3505979778199095, -1.5367783327489115, 6.812136133021838],
                [1.775146132683771, -1.5544267335612876, 6.1185898040060565],
                [1.0795583323521694, -1.1621382225774073, 7.235641158997318],
                [1.8083818729125243, 3.4175407913186913, 4.0143821752729],
                [2.7814055370997526, 3.691613564746362, 4.1013478844312985],
                [3.6397662096883634, 3.7336376481721096, 4.0571856931512755],
                [4.394980672671007, 3.6502740940614498, 3.801767103562341],
                [4.959400584980928, 3.4307157213525983, 3.4203107008980353],
                [5.465873040407478, 2.497786855503781, 2.5062737337177197],
                [7.689856519652151, 1.0412196960570919, -0.26515000881592243],
                [4.940530049710415, 1.6270907572879487, 3.065300150935819],
                [4.246910911920094, 1.4283284304099473, 3.4537199431652823],
                [3.387317709151211, 1.3908889520458843, 3.72088952601964],
                [2.580307916416312, 1.5141738446788215, 3.8447712886448713],
                [1.9760332765859911, 1.7229049968963261, 3.8453566104257746],
                [1.5659852366675735, 1.9379137299513882, 3.8738616938724206],
                [7.957246878619603, 1.1648188580574041, -2.625539550841218],
                [1.7772756953190365, -1.6530401881354786, 5.81012344165088],
                [0.9726607398623646, 0.2338056481052604, 6.249486141983134],
                [0.9311413359777969, -1.6401682461913545, 7.31264556721348],
                [0.6146585054027343, -1.9149917670019883, 7.073322144551021],
                [0.9362941353378864, -1.7095292609669328, 7.0118656178244905],
                [1.633467441832353, -1.8006618194544286, 5.605865033742248],
                [0.5118398815824152, -1.9949248604116834, 7.241958026425756],
                [0.47360330076555446, -2.0550465058201577, 6.497493896484578],
                [1.6232021181287144, 2.4732944061563824, 3.530720426141869],
                [1.2426024804913873, 2.286553419440435, 3.933776930450499],
                [1.0380288285857429, 2.1244025880548003, 4.398001762880824],
                [4.585947726166145, 2.697653518756658, 3.1686065284367686],
                [4.8963452263483225, 2.9067809474277846, 3.1254964007856714],
                ]

StrandT = tp.List[Vector]
EdgeT = tp.Tuple[int, int]
FaceT = tp.Tuple[int, ...]


def read_hair(filepath: str) -> tp.List[StrandT]:
    with open(filepath, "rb") as file:
        print(f"Reading file {filepath}")
        num_of_strands = struct.unpack("<i", file.read(4))[0]
        print(f"Number of strands: {num_of_strands}")

        total_vertices_count = 0
        strands: tp.List[StrandT] = []
        for _ in range(num_of_strands):
            strand_len = struct.unpack("<i", file.read(4))[0]
            total_vertices_count += strand_len

            strand: StrandT = [Vector.from_bytes(file) for _ in range(strand_len)]
            strands.append(strand)

        print(f"Total {total_vertices_count} vertices read")
        return strands


def build_normals(
        point_a: Vector,
        point_b: Vector,
        point_c: Vector,
        hair_width: float = 0.0003,
) -> tp.List[Vector]:
    vector_1 = point_a - point_b
    vector_2 = point_c - point_b

    vector_1.normalize()
    vector_2.normalize()

    if vector_1.dot_product(vector_2) > 0.0001:
        median = vector_1 + vector_2
    else:
        median = vector_1.get_any_normal()
    median.normalize()
    opposed_median = -1 * median

    normal = vector_1.cross_product(median)
    normal.normalize()

    opposed_normal = -1 * normal

    points = [
        point_b + hair_width * median,
        point_b + hair_width * normal,
        point_b + hair_width * opposed_median,
        point_b + hair_width * opposed_normal,
    ]

    # Rotate points to prevent skewing
    max_x = points[0].x
    max_x_idx = 0
    for i in range(1, 4):
        if points[i].x > max_x:
            max_x = points[i].x
            max_x_idx = i

    return points[max_x_idx:] + points[:max_x_idx]


def build_mesh_from_strand(
        strand: StrandT,
) -> tp.Tuple[tp.List[PointT], tp.List[EdgeT], tp.List[FaceT], tp.List[PointT]]:
    if len(strand) <= 2:
        return [], [], [], []

    vertices: tp.List[PointT] = [strand[0].tuple()]
    colors: tp.List[PointT] = [(0, 0, 0)]

    for i in range(1, len(strand) - 1):
        vertices += [
            x.tuple() for x in build_normals(strand[i - 1], strand[i], strand[i + 1])
        ]

        direction = strand[i] - strand[i - 1]
        direction.normalize()
        colors += [(abs(direction.x), abs(direction.y), abs(direction.z))] * 4

    vertices += [strand[-1].tuple()]
    colors += [(0, 0, 0)]

    edges: tp.List[EdgeT] = [(0, 1), (0, 2), (0, 3), (0, 4)]
    faces: tp.List[FaceT] = [(0, 1, 2), (0, 2, 3), (0, 3, 4), (0, 4, 1)]

    for i in range(len(strand) - 3):
        idx = 4 * i + 1
        # segment circular
        edges += [
            (idx, idx + 1),
            (idx + 1, idx + 2),
            (idx + 2, idx + 3),
            (idx + 3, idx),
        ]

        # cross-segment direct
        edges += [
            (idx, idx + 4),
            (idx + 1, idx + 5),
            (idx + 2, idx + 6),
            (idx + 3, idx + 7),
        ]

        # cross-segment diagonal
        edges += [
            (idx, idx + 5),
            (idx + 1, idx + 6),
            (idx + 2, idx + 7),
            (idx + 3, idx + 4),
        ]

        faces += [
            (idx, idx + 4, idx + 5),
            (idx, idx + 5, idx + 1),
            (idx + 1, idx + 5, idx + 6),
            (idx + 1, idx + 6, idx + 2),
            (idx + 2, idx + 6, idx + 7),
            (idx + 2, idx + 7, idx + 3),
            (idx + 3, idx + 7, idx + 4),
            (idx + 3, idx + 4, idx),
        ]

    last_idx = 1 + 4 * (len(strand) - 3)

    edges += [
        # last segment
        (last_idx, last_idx + 1),
        (last_idx + 1, last_idx + 2),
        (last_idx + 2, last_idx + 3),
        (last_idx + 3, last_idx),
        # conical
        (last_idx, last_idx + 4),
        (last_idx + 1, last_idx + 4),
        (last_idx + 2, last_idx + 4),
        (last_idx + 3, last_idx + 4),
    ]

    faces += [
        (last_idx, last_idx + 1, last_idx + 4),
        (last_idx + 1, last_idx + 2, last_idx + 4),
        (last_idx + 2, last_idx + 3, last_idx + 4),
        (last_idx + 3, last_idx, last_idx + 4),
    ]

    assert len(vertices) == (
            len(strand) - 2) * 4 + 2, f'Incorrect number of vertices: {len(vertices)}, {(len(strand) - 2) * 4 + 2}'

    return vertices, edges, faces, colors


def draw_debug_points():
    me = bpy.data.meshes.new("Landmarks mesh")
    ob = bpy.data.objects.new("Landmarks", me)

    coords = [
        (pt[0], -pt[2], pt[1])
        for pt in DEBUG_POINTS
    ]

    me.from_pydata(coords, [], [])
    me.update()
    bpy.context.collection.objects.link(ob)


def load_to_object(strands: tp.List[StrandT]):
    all_coords: tp.List[PointT] = []
    all_edges: tp.List[EdgeT] = []
    all_faces: tp.List[FaceT] = []
    all_colors: tp.List[PointT] = []
    idx_offset = 0

    invalid_strands_cnt = 0

    print("Constructing mesh from strands")
    for strand in tqdm.tqdm(strands):
        coords, edges, faces, colors = build_mesh_from_strand(strand)

        if not coords:
            invalid_strands_cnt += 1
            continue

        for st_idx, end_idx in edges:
            all_edges.append((st_idx + idx_offset, end_idx + idx_offset))
        for face in faces:
            all_faces.append(tuple(idx + idx_offset for idx in face))
        all_coords += coords
        all_colors += colors
        idx_offset += len(coords)

    print(f"Number of invalid strands: {invalid_strands_cnt}")

    print("Loading mesh to blender object...")
    me = bpy.data.meshes.new("Hair mesh")
    ob = bpy.data.objects.new("Hair", me)
    me.from_pydata(all_coords, all_edges, all_faces)
    print("Mesh had errors: ", me.validate(verbose=True))

    # Ignored by Cycles engine
    # for p in me.polygons:
    #     p.use_smooth = True
    me.update()

    # coloring vertices
    bm = bmesh.new()
    bm.from_mesh(me)
    color_layer = bm.loops.layers.color.new("color")
    for face in bm.faces:
        for loop in face.loops:
            loop[color_layer] = (*all_colors[loop.vert.index], 1.0)
    bm.to_mesh(me)
    me.update()

    print("Loaded:")
    print(f"  {len(ob.data.vertices)} vertices")
    print(f"  {len(ob.data.edges)} edges")
    print(f"  {len(ob.data.polygons)} polygons")
    return ob


def create_material():
    mat = bpy.data.materials.new(name="Hair Material")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links
    nodes.clear()

    # Cycles path
    geo_input_node = nodes.new(type="ShaderNodeNewGeometry")

    hair_node = nodes.new(type="ShaderNodeBsdfHairPrincipled")
    hair_node.parametrization = "MELANIN"
    hair_node.inputs["Melanin"].default_value = 0.5
    hair_node.inputs["Melanin Redness"].default_value = 0.5
    hair_node.inputs["Roughness"].default_value = 0.5
    hair_node.inputs["Radial Roughness"].default_value = 0.3
    hair_node.inputs["Coat"].default_value = 0.3
    hair_node.inputs["Random Color"].default_value = 0.5
    hair_node.inputs["Random Roughness"].default_value = 0.5

    output_node_cycles = nodes.new(type="ShaderNodeOutputMaterial")
    output_node_cycles.target = "CYCLES"

    links.new(geo_input_node.outputs["Random Per Island"], hair_node.inputs["Random"])
    links.new(hair_node.outputs["BSDF"], output_node_cycles.inputs["Surface"])

    # Eevee path
    vertex_color_node = nodes.new(type="ShaderNodeVertexColor")

    output_node_eevee = nodes.new(type="ShaderNodeOutputMaterial")
    output_node_eevee.target = "EEVEE"

    links.new(vertex_color_node.outputs["Color"], output_node_eevee.inputs["Surface"])

    return mat


def add_subdivision_surface(obj):
    modifier = obj.modifiers.new(name="Subdivision Surface", type="SUBSURF")
    bpy.ops.object.modifier_apply(modifier=modifier.name)


def setup_render_engine():
    scene = bpy.context.scene
    scene.cycles.device = "GPU"
    scene.cycles.preview_samples = 32
    scene.cycles.samples = 64
    scene.cycles.max_bounces = 4
    scene.render.resolution_x = 1024
    scene.render.resolution_y = 1024
    scene.render.image_settings.file_format = "PNG"

    # data required by compositor
    # bpy.context.view_layer.use_pass_object_index = True
    # bpy.context.view_layer.use_pass_normal = True
    bpy.context.view_layer.use_pass_cryptomatte_object = True


def setup_compositor():
    bpy.context.scene.use_nodes = True
    tree = bpy.context.scene.node_tree
    # clean-up
    for node in tree.nodes:
        tree.nodes.remove(node)

    input_node = tree.nodes.new(type="CompositorNodeRLayers")

    # id_mask_node = tree.nodes.new(type="CompositorNodeIDMask")
    # id_mask_node.index = 2
    # id_mask_node.use_antialiasing = True
    #
    # set_alpha_node = tree.nodes.new(type="CompositorNodeSetAlpha")

    cryptomatte_node = tree.nodes.new(type="CompositorNodeCryptomatteV2")
    cryptomatte_node.matte_id = "Hair"

    # base_output_node = tree.nodes.new(type="CompositorNodeOutputFile")
    # base_output_node.base_path = "./output_base"
    base_output_node = tree.nodes.new(type="CompositorNodeComposite")
    base_output_node.use_alpha = True

    tree.links.new(input_node.outputs["Image"], cryptomatte_node.inputs["Image"])
    tree.links.new(cryptomatte_node.outputs["Image"], base_output_node.inputs["Image"])

    # tree.links.new(input_node.outputs["IndexOB"], id_mask_node.inputs["ID value"])
    # tree.links.new(input_node.outputs["Image"], set_alpha_node.inputs["Image"])
    # tree.links.new(id_mask_node.outputs["Alpha"], set_alpha_node.inputs["Alpha"])
    # tree.links.new(set_alpha_node.outputs["Image"], base_output_node.inputs["Image"])

    # sep_rgba_node = tree.nodes.new(type="CompositorNodeSepRGBA")
    # tree.links.new(input_node.outputs["Normal"], sep_rgba_node.inputs["Image"])
    #
    # # R chanel for vertical, 0 - down, 1 up
    # add_r_node = tree.nodes.new(type="CompositorNodeMath")
    # add_r_node.operation = "ADD"
    # add_r_node.inputs[1].default_value = 1
    # tree.links.new(sep_rgba_node.outputs["R"], add_r_node.inputs[0])
    #
    # mul_r_node = tree.nodes.new(type="CompositorNodeMath")
    # mul_r_node.operation = "MULTIPLY"
    # mul_r_node.inputs[1].default_value = 0.5
    # tree.links.new(add_r_node.outputs["Value"], mul_r_node.inputs[0])
    #
    # # B channel for horizontal, 0 - left, 1 - right
    # add_b_node = tree.nodes.new(type="CompositorNodeMath")
    # add_b_node.operation = "ADD"
    # add_b_node.inputs[1].default_value = 1
    # tree.links.new(sep_rgba_node.outputs["B"], add_b_node.inputs[0])
    #
    # mul_b_node = tree.nodes.new(type="CompositorNodeMath")
    # mul_b_node.operation = "MULTIPLY"
    # mul_b_node.inputs[1].default_value = 0.5
    # tree.links.new(add_b_node.outputs["Value"], mul_b_node.inputs[0])
    #
    # combine_rgba_node = tree.nodes.new(type="CompositorNodeCombRGBA")
    # tree.links.new(mul_r_node.outputs["Value"], combine_rgba_node.inputs["R"])
    # tree.links.new(mul_b_node.outputs["Value"], combine_rgba_node.inputs["B"])
    #
    # set_alpha_node_2 = tree.nodes.new(type="CompositorNodeSetAlpha")
    # tree.links.new(combine_rgba_node.outputs["Image"], set_alpha_node_2.inputs["Image"])
    # tree.links.new(id_mask_node.outputs["Alpha"], set_alpha_node_2.inputs["Alpha"])
    #
    # normals_output_node = tree.nodes.new("CompositorNodeOutputFile")
    # normals_output_node.base_path = "./output_normals"
    # tree.links.new(set_alpha_node_2.outputs["Image"], normals_output_node.inputs["Image"])


def render(filename: str):
    RESULT_DIR = "./result"
    print("Rendering...")
    bpy.context.scene.render.engine = "CYCLES"
    bpy.context.scene.render.filepath = f"{RESULT_DIR}/{filename}_base.png"
    bpy.ops.render.render(write_still=1)

    bpy.context.scene.render.engine = "BLENDER_EEVEE"
    bpy.context.scene.render.filepath = f"{RESULT_DIR}/{filename}_structure.png"
    bpy.ops.render.render(write_still=1)
    print("Render done!")


def draw(filepath: str):
    mat = create_material()
    setup_render_engine()
    setup_compositor()

    strands = read_hair(filepath)

    obj = load_to_object(strands[::10])
    obj.pass_index = 2  # for compositor
    bpy.context.collection.objects.link(obj)
    bpy.context.view_layer.objects.active = obj

    obj.location = (0, 1, -1.745)
    obj.data.materials.append(mat)

    render("test")


def main():
    # STRANDS_DIR = os.path.abspath('../mastersdata/models/hairsalon/')
    # strand_names = [name[:-5] for name in os.listdir(STRANDS_DIR) if name.endswith('.data')]
    # strand_names.sort()
    # print(f"Found {len(strand_names)} strands files")

    mat = create_material()
    setup_render_engine()
    setup_compositor()

    # for strand_name in tqdm.tqdm(strand_names[:]):
    #     strands = read_hair(os.path.join(STRANDS_DIR, f'{strand_name}.data'))
    #
    #     obj = load_to_object(strands[::])
    #     bpy.context.collection.objects.link(obj)
    #     bpy.context.view_layer.objects.active = obj
    #
    #     obj.location = (0, 1, -1.745)
    #     obj.data.materials.append(mat)
    #
    #     render(strand_name)
    #
    #     bpy.data.objects.remove(obj)
    #     for block in bpy.data.meshes:
    #         if block.users == 0:
    #             bpy.data.meshes.remove(block)


main()

# draw("../mastersdata/models/hairsalon/strands00003.data")
